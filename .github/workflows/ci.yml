name: Assignment 5 - testing and CI Pipeline
on: [push, pull_request]
jobs:
  ruff:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: uv sync --locked --all-extras --dev

      - name: Run ruff check with fixes
        run: uv run ruff check --fix

      - name: Run ruff format
        run: uv run ruff format

      - name: Commit and push changes
        if: github.event_name == 'push'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          if ! git diff --staged --quiet; then
            git commit -m "style: apply ruff formatting and fixes"
            git push
          fi
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: astral-sh/setup-uv@v6
      - run: uv sync --locked --all-extras --dev

      - name: Run tests with coverage
        id: tests
        run: |
          start_time=$(date +%s)
          uv run pytest || true
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "duration=$duration" >> $GITHUB_OUTPUT
          echo "Test suite took ${duration} seconds"
        continue-on-error: true

      - name: Check test duration
        if: always()
        run: |
          duration=${{ steps.tests.outputs.duration }}
          if [ "$duration" -gt 60 ]; then
            echo "::error::Test suite took ${duration}s, which exceeds the 60s limit"
            exit 1
          else
            echo "::notice::Test suite completed in ${duration}s (within 60s limit)"
          fi

      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: pytest-results.xml
          check_name: Test Results

      - name: Generate coverage reports
        if: always()
        run: |
          uv run coverage report || true
          uv run coverage html
          uv run coverage xml

      - name: Add coverage to job summary
        if: always()
        run: |
          echo "## Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          uv run coverage report || true >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
            .coverage
          retention-days: 30

      - name: Comment coverage on PR
        if: always() && github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
          MINIMUM_GREEN: 90
          MINIMUM_ORANGE: 70

      - name: Fail if coverage below threshold
        if: always()
        run: uv run coverage report
